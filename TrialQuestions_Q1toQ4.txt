Q1-Q4 - Fix or improve the implementation of the below methods.

Q1 - Fix or improve the implementation of the below methods

-- Original

local function releaseStorage(player)
player:setStorageValue(1000, -1)
end

function onLogout(player)
if player:getStorageValue(1000) == 1 then
addEvent(releaseStorage, 1000, player)
end
return true
end

-- Edited

local function releaseStorage(player)
player:setStorageValue(1000, -1) -- Resets the storage value
end

function onLogout(player)
if player:getStorageValue(1000) >= 0 then -- Over or equal to 0 would suggest it's out of it's default value
addEvent(releaseStorage, 1000, player)    -- ^ The value could be higher than 1 and would pass the original check without resting
end
return true
end


Q2 - Fix or improve the implementation of the below method

-- Original

function printSmallGuildNames(memberCount)
-- this method is supposed to print names of all guilds that have less than memberCount max members
local selectGuildQuery = "SELECT name FROM guilds WHERE max_members < %d;"
local resultId = db.storeQuery(string.format(selectGuildQuery, memberCount))
local guildName = result.getString("name")
print(guildName)
end


-- Edited

function printSmallGuildNames(memberCount)
-- this method is supposed to print names of all guilds that have less than memberCount max members
local selectGuildQuery = "SELECT name FROM guilds WHERE max_members < %d;"
local resultId = db.storeQuery(string.format(selectGuildQuery, memberCount))

if resultID ~= false then -- checking if we got results
repeat                    -- need to repeat until we have printed ALL of the appropriate results

local guildName = result.getString("name")
print(guildName)

until not result:next()
result:free()
end
end

Q3 - Fix or improve the name and the implementation of the below method

-- original

function do_sth_with_PlayerParty(playerId, membername)
player = Player(playerId)
local party = player:getParty()

for k,v in pairs(party:getMembers()) do
if v == Player(membername) then
party:removeMember(Player(membername))
end
end
end

-- edited

function kickFromPlayerParty(hostPlayerId, memberName) -- changed function name to reflect functions use
player = Player(hostPlayerId)                          -- ^ changed first argument, playerID to hostPlayerID to remove possible confusion when calling this function
local party = player:getParty()                        -- ^ changed membername to memberName to adhere to coding conventions

for k,member in pairs(party:getMembers()) do          -- changed v to member for clarity
if member == Player(memberName) then
party:removeMember(Player(memberName))
end
end
end

Q4 - Assume all method calls work fine. Fix the memory leak issue in below method

// original

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
Player* player = g_game.getPlayerByName(recipient);
if (!player) {
player = new Player(nullptr);
if (!IOLoginData::loadPlayerByName(player, recipient)) {
return;
}
}

Item* item = Item::CreateItem(itemId);
if (!item) {
return;
}

g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

if (player->isOffline()) {
IOLoginData::savePlayer(player);
}
}

// edited

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
Player* player = g_game.getPlayerByName(recipient);      // we may be able to use smart pointers but that would require other changes such as changing the parameters of the other functions
if (!player) {                                           // ^ if we were to, the line above this one would look something like this: std::unique_ptr<Player> player = std::unique_ptr<Player>(g_game.getPlayerByName(recipient));
player = new Player(nullptr);                            // and this line would look like: player = std::unique_ptr<Player>(new Player(nullptr)); AND we would not call delete later

if (!IOLoginData::loadPlayerByName(player, recipient)) { // assuming this takes the pointer if succesful since calling delete player further in the code would make an error if new plsyer didn't get called
delete player                                            // must delete unused pointer if loadPlayerByName failed it's job
return;
}
}

Item* item = Item::CreateItem(itemId);
if (!item) {
return;
}

g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

if (player->isOffline()) {
IOLoginData::savePlayer(player);
}
}